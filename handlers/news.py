from data.news_data import *
import requests
import time  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è time –¥–ª—è time.sleep()
from datetime import time as datetime_time, datetime  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π time –∏–∑ datetime
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import ContextTypes
from urllib.parse import urljoin
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import WebDriverException

# –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã (8:00 - 22:00)
START_TIME = datetime_time(8, 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π datetime_time
END_TIME = datetime_time(22, 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π datetime_time

# –°–ª–æ–≤–∞—Ä—å —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
sources = {
    1: {
        "url": "https://news.google.com/topics/CAAqJggKIiBDQkFTRWdvSUwyMHZNRGx1YlY4U0FuSjFHZ0pTVlNnQVAB?hl=ru&gl=RU&ceid=RU%3Aru",
        "parser": lambda soup: soup.find("a", class_="WwrzSb")["href"],
    },
    2: {
        "url": "https://nokta.md",
        "parser": lambda soup: soup.find("a", class_="list-item__link-inner")["href"],
    },
    3: {
        "url": "https://newsmaker.md/ru/category/news",
        "parser": lambda soup: soup.find("h3", class_="elementor-heading-title elementor-size-default").find("a")["href"],
    },
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–¥–µ—Å—å
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
last_news = {i: NewsItem("") for i in sources.keys()}

async def news_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π c –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é."""
    
    #–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ —á–∞—Ç–∞
    await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
    
    #–ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
    job = context.job_queue.run_repeating(
        post_news, 
        interval=7000, 
        first=0.1, 
        chat_id=update.message.chat_id
        )
    context.chat_data['news_job'] = job  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    print(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞—á–∞—Ç–∞!")

async def stop_news_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏."""

    #–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ —á–∞—Ç–∞
    await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
    
    if 'news_job' in context.chat_data:
        job = context.chat_data['news_job']
        job.schedule_removal()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
        del context.chat_data['news_job']  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        print("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
       print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

async def post_news(context: ContextTypes.DEFAULT_TYPE):
    global last_news

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    now = datetime.now().time()
    if not (START_TIME <= now <= END_TIME):
        print("–í—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –æ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã! –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!")
        return

    for source_index in sources.keys():
        news = parse_news(source_index)
        if news != last_news[source_index]:
            last_news[source_index] = news
            # Combine the caption with the message text
            message_text = f"üö® –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç @moldovabolgaria ‚Äî —á–∏—Ç–∞–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n{news.format_news()}"
            await context.bot.send_message(
                chat_id=context.job.chat_id, 
                text=message_text
            )
            print(f"News posted from source {source_index}: {news.link}")
            return  # –ü—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å –∑–∞ —Ä–∞–∑

    print("No new news from any source.")

def parse_news(source_index):
    source = sources.get(source_index)
    if not source:
        print(f"Source {source_index} not found!")
        return NewsItem("")

    try:
        response = requests.get(source["url"])
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "lxml")
        link = source["parser"](soup)

        if not link.startswith("https"):
            print("GET REAL LINK")
            real_url = get_real_url(link)
            return NewsItem(real_url)

        return NewsItem(link)
    except Exception as e:
        print(f"Error parsing source {source_index}: {e}")
        return NewsItem("")



def get_real_url(relative_url):
    full_url = urljoin("https://news.google.com/", relative_url)
    
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Linux
    options.add_argument("--disable-dev-shm-usage")  # –í–∞–∂–Ω–æ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    options.add_argument("--remote-debugging-port=9222")  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç
    options.add_argument("--user-data-dir=/tmp/chrome_profile")  # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
    
    try:
        # –î–ª—è Linux —è–≤–Ω–æ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ chromedriver
        service = Service('/usr/bin/chromedriver')
        driver = webdriver.Chrome(service=service, options=options)
        
        driver.get(full_url)
        driver.set_page_load_timeout(30)
        
        current_url = driver.current_url
        stable = False
        attempts = 0
        
        while not stable and attempts < 10:
            time.sleep(1)
            new_url = driver.current_url
            
            if new_url == current_url:
                stable = True
            else:
                current_url = new_url
            
            attempts += 1
        
        return driver.current_url
    except WebDriverException as e:
        print(f"WebDriver error: {e}")
        return ""
    finally:
        if 'driver' in locals():
            driver.quit()